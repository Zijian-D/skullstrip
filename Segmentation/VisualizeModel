import tensorflow as tf
import nibabel as nib
import keras
import numpy as np
import keyboard
import matplotlib.pyplot as plt


def main():
    input_layer = keras.layers.Input(shape=(16, 256, 100))
    conv1 = keras.layers.Conv2D(filters=24, kernel_size=(3, 3), activation='relu', padding='same')(input_layer)
    pool1 = keras.layers.MaxPool2D(pool_size=(2, 2))(conv1)
    conv2 = keras.layers.Conv2D(filters=48, kernel_size=(3, 3), activation='relu', padding='same')(pool1)
    pool2 = keras.layers.MaxPool2D(pool_size=(2, 2))(conv2)
    conv3 = keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same')(pool2)
    pool3 = keras.layers.MaxPool2D(pool_size=(2, 2))(conv3)

    dconv3 = keras.layers.Conv2DTranspose(filters=48, kernel_size=(3, 3), padding='same')(pool3)
    unpool3 = keras.layers.UpSampling2D(size=(2, 2))(dconv3)
    dconv2 = keras.layers.Conv2DTranspose(filters=48, kernel_size=(3, 3), padding='same')(unpool3)
    unpool2 = keras.layers.UpSampling2D(size=(2, 2))(dconv2)
    dconv1 = keras.layers.Conv2DTranspose(filters=24, kernel_size=(3, 3), padding='same')(unpool2)
    unpool1 = keras.layers.UpSampling2D(size=(2, 2))(dconv1)

    output = keras.layers.Conv2D(filters=100, kernel_size=(3, 3), activation='sigmoid', padding='same')(unpool1)

    model = keras.models.Model(inputs=input_layer, output=output)
    opt = keras.optimizers.Adam()
    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=[keras.metrics.binary_accuracy])

    image = nib.load('C:/Users/adamc/PycharmProjects/Modeling/skullstrip-master/skullstrip-master/RARE/Animal_191205_1_B50027_15_1_T1_RARE_MEMRI_exercise.nii.gz')
    data = image.get_fdata()
    mask = nib.load('C:/Users/adamc/PycharmProjects/Modeling/skullstrip-master/skullstrip-master/Masks/191205_1_Mask.nii.gz')
    truth = mask.get_fdata()

    arrayData = np.array([data[0:16]])
    arrayTruth = np.array([truth[0:16]])

    for x in range(16, len(data) - 16, 16):
        arrayData = np.append(arrayData, [data[x:x+16]], axis=0)
        arrayTruth = np.append(arrayTruth, [truth[x:x+16]], axis=0)

    testdata = np.array([data[48:64], data[64:80]])
    testtruth = np.array([truth[45:61], truth[61:77]])

    model.fit(arrayData, arrayTruth, epochs=600, batch_size=8)

    predictions = model.predict(arrayData[3:4])
    predictions = np.round(predictions)

    plt.ion()
    plt.axis('off')
    plt.figure(0)

    print(len(predictions[0][0][0]))

    plt.imshow(testdata[0, :, :, 0], cmap='gray')
    plt.imshow(predictions[0, :, :, 0], alpha=0.2)
    plt.draw()
    plt.pause(0.0001)

    x = 0
    View = 0

    while True:
        if View == 0:
            if x > len(testdata[0, 0, 0]) - 1:
                x = len(testdata[0, 0, 0]) - 1
            plt.clf()
            plt.imshow(testdata[0, :, :, x], cmap='gray')
            plt.imshow(predictions[0, :, :, x], alpha=0.2)
            plt.axis('off')
            plt.draw()
            plt.pause(0.0001)
        if View == 1:
            if x > len(testdata[0][0]) - 1:
                x = len(predictions[0]) - 1
            plt.clf()
            plt.imshow(testdata[0, :, x, :], cmap='gray')
            plt.imshow(predictions[0, :, x, :], alpha=0.2)
            plt.axis('off')
            plt.draw()
            plt.pause(0.0001)
        if View == 2:
            if x > len(testdata[0]) - 1:
                x = len(predictions) - 1
            plt.clf()
            plt.imshow(arrayData[3, x, :, :], cmap='gray')
            plt.imshow(predictions[0, x, :, :], alpha=0.2)
            plt.axis('off')
            plt.draw()
            plt.pause(0.0001)

        if keyboard.read_key() == "t":
            x += 1
            print(x)
        elif keyboard.read_key() == "g":
            x -= 1
            print(x)
        elif keyboard.read_key() == "w":
            View = 0
        elif keyboard.read_key() == "e":
            View = 1
        elif keyboard.read_key() == "r":
            View = 2
        elif keyboard.read_key() == "y":
            break
        if x < 0:
            x = 0


if __name__ == "__main__":
    main()
